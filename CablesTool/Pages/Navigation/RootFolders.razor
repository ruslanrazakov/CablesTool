@using Data
@using Microsoft.AspNetCore.Components
@using System.IO

<div class=" flex-fill bd-highlight list-group p-2  border rounded"  style="width: min-content">
    <h3>Folders</h3>

    <div class=" flex-fill bd-highlight list-group p-2 border rounded" id="list-tab" role="tablist" style="height: 50rem; overflow-y: auto;">
        @foreach (var folder in rootFolders)
        {
            <div class="d-flex flex-row">
                <div class="list-group-item list-group-item-action @GetActive(folder.Id)" id="list-home-list" data-toggle="list" role="tab"
                     @onclick="@(() => OpenRootFolder(folder.Id))">
                    @folder.Name
                    <span class="badge badge-primary badge-pill">Local storage</span>
                </div>
            </div>
        }
    </div>
    <div class="d-flex bd-highlight">
        @if (folderNameTextAreaEnabled)
        {
            <input class="list-group-item list-group-item-action" type="text" @bind="@rootFolderName" @bind:event="oninput">
            <button disabled="@(rootFolderName == String.Empty)"
                    class="btn btn-secondary"
                    type="button"
                    @onclick="@(() => ConfirmRootFolderName())">
                Add
            </button>
        }
        else
        {
            <button class="btn btn-secondary" type="button" @onclick="@(() => CreateRootFolder())">
                <span class="oi oi-plus"></span>
            </button>
        }
        <PopConfirm Class="btn btn-secondary" ConfirmedChanged="@RemoveRootFolder">
            <span class="oi oi-minus"></span>
        </PopConfirm>
    </div>

</div>


@code {
    [Inject]
    ApplicationContext ApplicationContext { get; set; }
    [Inject]
    NavigationEvents NavigationEvents { get; set; }
    List<RootFolderEntity> rootFolders;
    long? currentRootFolderId;
    string rootFolderName = String.Empty;
    bool folderNameTextAreaEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        rootFolders = ApplicationContext.RootFolders.Where(rf => rf.Status == FolderStatus.Active).ToList();
        currentRootFolderId = rootFolders != null && rootFolders.Count() > 0 ? rootFolders.First().Id : null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && rootFolders != null && rootFolders.Any())
            await OpenRootFolder(currentRootFolderId);
    }

    private async Task OpenRootFolder(long? id)
    {
        currentRootFolderId = id;
        rootFolderName = ApplicationContext.RootFolders.FirstOrDefault(f => f.Id == id).Name;
        await NavigationEvents.ChangeRootFolder(id);

        StateHasChanged();
    }

    private void CreateRootFolder()
    {
        folderNameTextAreaEnabled = true;
    }

    private async Task ConfirmRootFolderName()
    {
        folderNameTextAreaEnabled = false;

        string path = Utils.Constants.cablesProjectFolderPath + rootFolderName;
        ApplicationContext.RootFolders.Add(new RootFolderEntity()
        {
            Name = rootFolderName,
            Status = FolderStatus.Active,
            Path = path
        });
        await ApplicationContext.SaveChangesAsync();

        Directory.CreateDirectory(path);

        rootFolders = ApplicationContext.RootFolders.Where(f => f.Status == FolderStatus.Active).ToList();
        rootFolderName = String.Empty;
        StateHasChanged();
    }

    private async Task RemoveRootFolder(bool confirmed)
    {
        if (confirmed)
        {
            var folderToRemove = ApplicationContext.RootFolders.FirstOrDefault(f => f.Id == currentRootFolderId);
            folderToRemove.Status = FolderStatus.Archived;
            await ApplicationContext.SaveChangesAsync();
            rootFolders = ApplicationContext.RootFolders.Where(f => f.Status == FolderStatus.Active).ToList();
            StateHasChanged();
        }
        await NavigationEvents.ChangeRootFolder(currentRootFolderId);
    }

    string GetActive(long id) => id == currentRootFolderId ? "list-group-item-warning" : String.Empty;
}
