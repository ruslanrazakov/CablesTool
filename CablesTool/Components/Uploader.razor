
@using System.IO
@using Microsoft.Extensions.Logging
@using CablesTool.Data
<div class="border">
    <p>
        Upload to @FolderName
    </p>
    <div class="in-border">

        <p>
            <label>
                Max size-@MaxFileSizeKb Kb:
                <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="@LoadFiles"/>
            </label>
        </p>
        @if (isLoading)
        {
            <div class="spinner-border text-primary" role="status"></div>
            <p>Loading...</p>
        }
        else if (loadedFile != null)
        {
            <p>Name:</p> @loadedFile.Name
            <p>Last modified:</p> @loadedFile.LastModified.ToString()
            <p>Size (bytes):</p> @loadedFile.Size
            <p>Content type:</p> @loadedFile.ContentType
        }
    </div>
</div>

@code {
    [Inject]
    public ILogger<NavMenu> Logger { get; set; }
    [Inject]
    public ProjectContent<string> ProjectContent { get; set; }
    [Inject]
    public ApplicationContext ApplicationContext { get; set; }
    [Inject]
    public IJSRuntime JS { get; set; }
    [Parameter]
    public string FolderName { get; set; }

    private long maxFileSizeBytes = 1024 * 1024 * 1000;
    public long MaxFileSizeKb
    {
        get => maxFileSizeBytes / 1024;
    }
    private IBrowserFile loadedFile;
    private int maxAllowedFiles = 3;
    private bool isLoading = false;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var filePath = AppDomain.CurrentDomain.BaseDirectory + "/wwwroot/Projects/" + FolderName + "/" + e.File.Name;

        try
        {
            Logger.LogInformation( e.File.Name);
            await WriteFile(filePath, e);
            await SaveToDatabase(filePath, e);
        }
        catch (Exception ex)
        {
            Logger.LogError("File: {Filename} Error: {Error}",
                e.File.Name, ex.Message);
        }

        isLoading = false;
    }

    private async Task WriteFile(string filePath, InputFileChangeEventArgs e)
    {
        await using FileStream fs = new(filePath, FileMode.Create);
        await e.File.OpenReadStream(maxFileSizeBytes).CopyToAsync(fs);
    }

    private async Task SaveToDatabase(string filePath, InputFileChangeEventArgs e)
    {
        float videoLength = await JS.InvokeAsync<float>("getVideoLength", filePath);

        ApplicationContext.VideoFiles.Add(new VideoFileEntity()
        {
            Name = e.File.Name,
            Path = filePath,
            Length = videoLength
        });
        await ApplicationContext.SaveChangesAsync();
    }
}
