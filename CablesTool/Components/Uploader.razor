
@using System.IO
@using Microsoft.Extensions.Logging

<!--<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>-->

<p>
    <label>
        Max file size - @maxFileSize bytes:
        <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else if (loadedFile != null)
{
    <li>Name: @loadedFile.Name</li>
    <li>Last modified: @loadedFile.LastModified.ToString()</li>
    <li>Size (bytes): @loadedFile.Size</li>
    <li>Content type: @loadedFile.ContentType</li>
}

@code {
    [Inject]
    public ILogger<NavMenu> Logger { get; set; }
    [Inject]
    public ProjectContent<string> ProjectContent { get; set; }
    private IBrowserFile loadedFile;
    private long maxFileSize = 1024 * 1024 * 1000;
    private int maxAllowedFiles = 3;
    private bool isLoading = false;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        try
        {
            await using FileStream fs = new(AppDomain.CurrentDomain.BaseDirectory + "/wwwroot/" + "1.mp4", FileMode.Create);
            await e.File.OpenReadStream(maxFileSize).CopyToAsync(fs);
        }
        catch (Exception ex)
        {
            Logger.LogError("File: {Filename} Error: {Error}",
                e.File.Name, ex.Message);
        }


        isLoading = false;
    }
}
