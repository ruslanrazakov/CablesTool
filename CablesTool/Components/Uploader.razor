
@using System.IO
@using Microsoft.Extensions.Logging
@using CablesTool.Data
@using CablesTool.Services
@using Xabe.FFmpeg

<div class="border">
    <p>
        Upload:
    </p>
    <div class="in-border">
        <div class="left-to-right-container">
            <p>
                <div class="input-group">
                    <div class="custom-file">
                        <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="@LoadFiles"
                                                                         type="file" 
                                                                         class="custom-file-input" 
                                                                         id="inputGroupFile04" 
                                                                         aria-describedby="inputGroupFileAddon04">
                        </Microsoft.AspNetCore.Components.Forms.InputFile>
                        <label class="custom-file-label" for="inputGroupFile">Choose video</label>
                    </div>
                </div>

            </p>
            @if (isLoading)
            {
                <div class="spinner-border text-primary" role="status"></div>
                <p>Loading...</p>
            }
            else if (loadedFile != null)
            {
                <p>Name:</p> @loadedFile.Name
                <p>Last modified:</p> @loadedFile.LastModified.ToString()
                <p>Size (bytes):</p> @loadedFile.Size
                <p>Content type:</p> @loadedFile.ContentType
            }

            @VideoName
        </div>
    </div>
</div>

@code {
    [Inject]
    public ILogger<Uploader> Logger { get; set; }
    [Inject]
    public ApplicationContext ApplicationContext { get; set; }
    [Inject]
    public IJSRuntime JS { get; set; }
    [Inject]
    public UploadEvents<long> UploadEvents { get; set; }
    [Parameter]
    public string FolderName { get; set; }
    public string VideoName;

    private long maxFileSizeBytes = 1024 * 1024 * 1000;
    public long MaxFileSizeKb
    {
        get => maxFileSizeBytes / 1024;
    }
    private IBrowserFile loadedFile;
    private int maxAllowedFiles = 3;
    private bool isLoading = false;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var videoFile = ApplicationContext.VideoFiles.FirstOrDefault(file => file.Name == e.File.Name);
        try
        {
            string filePath = AppDomain.CurrentDomain.BaseDirectory + "wwwroot/CablesProject/" + e.File.Name;
            Logger.LogInformation(e.File.Name);
            if (videoFile == null)
            {
                await WriteFile(filePath, e);
                var currentId = await SaveToDatabase(filePath, e);
                await UploadEvents.UploadFile(currentId);
            }
            else
            {
                await UploadEvents.UploadFile(videoFile.Id);
            }
            isLoading = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }

        isLoading = false;
    }

    private async Task WriteFile(string filePath, InputFileChangeEventArgs e)
    {
        await using FileStream fs = new(filePath, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None);
        await e.File.OpenReadStream(maxFileSizeBytes).CopyToAsync(fs);
        File.SetAttributes(filePath, FileAttributes.Normal);
        Logger.LogInformation($"{filePath} uploaded.");
    }

    private async Task<long> SaveToDatabase(string filePath, InputFileChangeEventArgs e)
    {
        TimeSpan videoLength = await GetVideoLength(filePath);

        VideoFileEntity videoFileEntity = new()
        {
            Name = e.File.Name,
            Path = filePath,
            Length = Math.Round( videoLength.TotalSeconds, 0)
        };

        ApplicationContext.VideoFiles.Add(videoFileEntity);
        await ApplicationContext.SaveChangesAsync();
        Logger.LogInformation($"{filePath} metadata saved to Db.");

        return ApplicationContext.VideoFiles.FirstOrDefault(v => v.Name == videoFileEntity.Name).Id;

    }

    private async Task<TimeSpan> GetVideoLength(string filePath)
    {
        IMediaInfo mediaInfo = await FFmpeg.GetMediaInfo(filePath);
        var videoDuration = mediaInfo.VideoStreams.First().Duration;
        return videoDuration;
    }
}
