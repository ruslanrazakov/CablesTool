
@using System.IO
@using Microsoft.Extensions.Logging
@using CablesTool.Data
@using CablesTool.Services
@using System.Threading
@using Utils
@using Xabe.FFmpeg
@using Microsoft.AspNetCore.Components
@using CablesTool.Pages.Navigation


<div class="left-to-right-container">
        <label class="custom-file-upload btn btn-secondary btn-sm"> 
            <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="@LoadFiles"
                                                                style="display: none"
                                                                type="file"
                                                                accept=".mp4">
            </Microsoft.AspNetCore.Components.Forms.InputFile>
            <span class="oi oi-plus"></span>
        </label>
    @if (isLoading)
    {
        <div class="progress" style="width: 200px">
            <div class="progress-bar" role="progressbar"
                    style="@($"width: {progressPercentValue}%")"
                    aria-valuenow="@progressPercentValue"
                    aria-valuemin="0"
                    aria-valuemax="100">@progressPercentValue %
            </div>
        </div>
        }
</div>

@code {
    [CascadingParameter(Name = "NameIdentifier")]
    public string NameIdentifier { get; set; }
    [Inject]
    public ILogger<Uploader> Logger { get; set; }
    [Inject]
    public ApplicationContext ApplicationContext { get; set; }
    [Inject]
    public IJSRuntime JS { get; set; }
    [Inject]
    public FileChangedEventsService<long> FileChangedEvents { get; set; }
    [Inject]
    public NavigationEvents NavigationEvents { get; set; }
    [Parameter]
    public long? FolderId { get; set; }

    public string VideoName;
    private CancellationTokenSource cts;
    private long maxFileSizeBytes = 1024 * 1024 * 1000;
    public long MaxFileSizeKb
    {
        get => maxFileSizeBytes / 1024;
    }
    private IBrowserFile loadedFile;
    private int progressPercentValue = 0;
    private bool isLoading = false;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var videoFile = ApplicationContext.VideoFiles.FirstOrDefault(file => file.Name == e.File.Name && file.Name.Contains(NameIdentifier));
        try
        {
            if (videoFile == null)
            {
                string filePath = Constants.cablesProjectFolderPath + e.File.Name.Replace(".mp4", String.Empty) + NameIdentifier + ".mp4";
                await WriteVideoFileStream(filePath, e);
                long videoFileId = await SaveVideoFileMetadataToDB(filePath, e);
                await FileChangedEvents.ChangeFile(videoFileId);
                NavigationEvents.UpdateUI();
            }
            else
                await FileChangedEvents.ChangeFile(videoFile.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
        finally
        {
            isLoading = false;
            progressPercentValue = 0;
        }
        NavigationEvents.NoifyFileUploaded();
        StateHasChanged();
    }

    /// <summary>
    /// Provides filestream and manages progressbar
    /// </summary>
    /// <param name="filePath"></param>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task WriteVideoFileStream(string filePath, InputFileChangeEventArgs e)
    {
        cts = new CancellationTokenSource();
        await using (FileStream outputStream = new(filePath, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None))
        {
            var inputStream = e.File.OpenReadStream(maxFileSizeBytes, cts.Token);
            int bytesChunk;
            double inputFullLength = inputStream.Length;
            double currentLength = 0;
            var buffer = new byte[1024 * 16];

            while ((bytesChunk = await inputStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                await outputStream.WriteAsync(buffer, 0, bytesChunk);
                currentLength += bytesChunk;
                progressPercentValue = Convert.ToInt32(currentLength / inputFullLength * 100d);
                StateHasChanged();
                Logger.LogInformation($"Uploading {e.File.Name}: {progressPercentValue.ToString()}");
            }
        }

        File.SetAttributes(filePath, FileAttributes.Normal);
        Logger.LogInformation($"{filePath} uploaded.");
    }

    private async Task<long> SaveVideoFileMetadataToDB(string filePath, InputFileChangeEventArgs e)
    {
        TimeSpan videoLength = await GetVideoLength(filePath);

        VideoFileEntity videoFileEntity = new()
        {
            Name = e.File.Name,
            Path = filePath,
            Length = Math.Round(videoLength.TotalSeconds, 0),
            UserIdentifier = NameIdentifier,
            FileFolderId = (long)FolderId,
        };

        ApplicationContext.VideoFiles.Add(videoFileEntity);

        await ApplicationContext.SaveChangesAsync();
        Logger.LogInformation($"{filePath} metadata saved to Db.");

        return videoFileEntity.Id;
    }

    /// <summary>
    /// Uses FFmpeg lib
    /// FFmpeg should be installed on host OS
    /// </summary>
    /// <param name="filePath"></param>
    /// <returns></returns>
    private async Task<TimeSpan> GetVideoLength(string filePath)
    {
        IMediaInfo mediaInfo = await FFmpeg.GetMediaInfo(filePath);
        var videoDuration = mediaInfo.VideoStreams.First().Duration;
        return videoDuration;
    }
}
