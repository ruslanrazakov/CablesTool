@using System.Timers
@using Microsoft.Extensions.Logging
@using Nito.AsyncEx.Synchronous
@using System.Globalization
@using System.Threading
@using Data
@using Utils 
@inject JSWrapper JSWrapper

<iframe id="patchFrame" class="video-control" src="@ProjectPath"></iframe>

<div class="left-to-right-container">
    <button class="btn btn-secondary" type="button" @onclick="PlayClicked"><span class="oi oi-media-play"></span></button>
    <button class="btn btn-secondary" type="button" @onclick="StopClicked"><span class="oi oi-media-stop"></span></button>
    <div style="width: 100%"></div>
    <h5 style="flex: none">@VideoName   @CurrentTime:00/@VideoLength:00</h5>
</div>

<!--comments icons for slider range-->
<div class="d-inline-flex" style="width:100%">
    @foreach (var currentSecond in Enumerable.Range(0, int_VideoLength+1))
    {
        var comment = CommentEntities.FirstOrDefault(comment => comment.Time == currentSecond);
        if (comment != null)
        {
            <span data-descr="@comment.UserName: @comment.Content">
                <span class="oi oi-chat" @onclick="@(()=>VideoSliderChanged(currentSecond.ToString()))" />
            </span>
        }
        else
        {
            <span data-descr="@String.Empty" style="visibility:hidden">
                <span class="oi oi-chat" style="visibility:hidden" />
            </span>
        }
    }
</div>

<input class="slider" type="range" min="0" max="@VideoLength" step="1"
       @bind-value="@CurrentTime"
       @onmousedown="VideoSliderInputMouseDown"
       @onmouseup="VideoSliderInputMouseUp"
       @oninput="@((args) => VideoSliderChanged(args.Value.ToString()))" />

@code {
    [Inject]
    public ILogger<CablesPlayer> Logger { get; set; }
    [Parameter]
    public double VideoLength { get; set; }
    private int int_VideoLength => (int)VideoLength;
    [Parameter]
    public string ProjectPath { get; set; }
    [Parameter]
    public string VideoName { get; set; } = "Video not selected";
    [Parameter]
    public List<CommentEntity> CommentEntities { get; set; }

    public double CurrentTime { get; set; }
    private bool isPlaying;

    TimerAsync timer = new TimerAsync(delay: 100);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500); // !important for successfull uploading /Project/Path.html in Iframe!

            if (VideoName != null && VideoName != String.Empty)
            {
                await Stop();
                await JSWrapper.SetCablesVariable("s_videoPath", VideoName);
            }
        }
    }

    private async Task PlayClicked()
    {
        await Play();
        isPlaying = true;
    }

    private async Task Play()
    {
        await JSWrapper.SetCablesVariable("i_videoSpeed", "1");

        await timer.Start(async () => await UpdateVideoSlider());
        Logger.LogInformation("CABLESPLAYER PLAYING");
    }

    private async Task UpdateVideoSlider()
    {
        var time = await JSWrapper.GetCablesVariable("i_getTime");
        CurrentTime = Math.Round(time, 0);
        Logger.LogInformation(CurrentTime.ToString());

        StateHasChanged();
    }

    private async Task StopClicked()
    {
        await Stop();
        isPlaying = false;
    }

    private async Task Stop()
    {
        await timer.Stop(async () => await JSWrapper.SetCablesVariable("i_videoSpeed", "0"));
        Logger.LogInformation("CABLESPLAYER STOPPED");
    }

    private async Task VideoSliderInputMouseDown()
    {
        await Stop();
    }

    private async Task VideoSliderInputMouseUp()
    {
        if (isPlaying) await Play();
        else await Stop();
    }

    private async Task VideoSliderChanged(string step)
    {
        await ChangeVideoPosition(step);
    }

    public async Task ChangeVideoPosition(string step)
    {
        CurrentTime = Convert.ToDouble(step);
        double cablesTime = Convert.ToDouble(step) + GetSmallRandomDouble();
        await JSWrapper.SetCablesVariable("i_videoTime", cablesTime.ToString(CultureInfo.InvariantCulture));
        StateHasChanged();
    }

    /// <summary>
    /// Cables unexpected behavior: cant set same variable more than one time.
    /// So, we can add small float number to i_videoTime variable to send different variables in Cables build
    /// </summary>
    /// <returns></returns>
    private double GetSmallRandomDouble()
    {
        Random rnd = new Random();
        double max = 0.5;
        return Math.Round(rnd.NextDouble() * max, 1);
    }

    public async Task ChangeVideoContent(string fileName)
    {
        await Stop();
        VideoName = fileName;
        CurrentTime = 0;
        await JSWrapper.SetCablesVariable("s_videoPath", fileName);
    }
}
